/*
 * Generated by gdbus-codegen 2.56.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __GROUP_GENERATED_H__
#define __GROUP_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.isoft.user.group */

#define USER_TYPE_GROUP (user_group_get_type ())
#define USER_GROUP(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), USER_TYPE_GROUP, userGroup))
#define USER_IS_GROUP(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), USER_TYPE_GROUP))
#define USER_GROUP_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), USER_TYPE_GROUP, userGroupIface))

struct _userGroup;
typedef struct _userGroup userGroup;
typedef struct _userGroupIface userGroupIface;

struct _userGroupIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_add_user) (
    userGroup *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_user);

  gboolean (*handle_create_group) (
    userGroup *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_delete_group) (
    userGroup *object,
    GDBusMethodInvocation *invocation,
    gint64 arg_id);

  gboolean (*handle_find_group_by_id) (
    userGroup *object,
    GDBusMethodInvocation *invocation,
    gint64 arg_id);

  gboolean (*handle_find_group_by_name) (
    userGroup *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_remove_user) (
    userGroup *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_user);

  gboolean (*handle_set_group_name) (
    userGroup *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  guint64  (*get_gid) (userGroup *object);

  const gchar * (*get_group_name) (userGroup *object);

  gboolean  (*get_local_group) (userGroup *object);

  const gchar *const * (*get_users) (userGroup *object);

  void (*changed) (
    userGroup *object);

  void (*group_added) (
    userGroup *object,
    const gchar *arg_user);

  void (*group_deleted) (
    userGroup *object,
    const gchar *arg_user);

};

GType user_group_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *user_group_interface_info (void);
guint user_group_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void user_group_complete_set_group_name (
    userGroup *object,
    GDBusMethodInvocation *invocation);

void user_group_complete_add_user (
    userGroup *object,
    GDBusMethodInvocation *invocation);

void user_group_complete_remove_user (
    userGroup *object,
    GDBusMethodInvocation *invocation);

void user_group_complete_find_group_by_id (
    userGroup *object,
    GDBusMethodInvocation *invocation,
    const gchar *group);

void user_group_complete_find_group_by_name (
    userGroup *object,
    GDBusMethodInvocation *invocation,
    const gchar *group);

void user_group_complete_create_group (
    userGroup *object,
    GDBusMethodInvocation *invocation,
    const gchar *group);

void user_group_complete_delete_group (
    userGroup *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void user_group_emit_changed (
    userGroup *object);

void user_group_emit_group_added (
    userGroup *object,
    const gchar *arg_user);

void user_group_emit_group_deleted (
    userGroup *object,
    const gchar *arg_user);



/* D-Bus method calls: */
void user_group_call_set_group_name (
    userGroup *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean user_group_call_set_group_name_finish (
    userGroup *proxy,
    GAsyncResult *res,
    GError **error);

gboolean user_group_call_set_group_name_sync (
    userGroup *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GError **error);

void user_group_call_add_user (
    userGroup *proxy,
    const gchar *arg_user,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean user_group_call_add_user_finish (
    userGroup *proxy,
    GAsyncResult *res,
    GError **error);

gboolean user_group_call_add_user_sync (
    userGroup *proxy,
    const gchar *arg_user,
    GCancellable *cancellable,
    GError **error);

void user_group_call_remove_user (
    userGroup *proxy,
    const gchar *arg_user,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean user_group_call_remove_user_finish (
    userGroup *proxy,
    GAsyncResult *res,
    GError **error);

gboolean user_group_call_remove_user_sync (
    userGroup *proxy,
    const gchar *arg_user,
    GCancellable *cancellable,
    GError **error);

void user_group_call_find_group_by_id (
    userGroup *proxy,
    gint64 arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean user_group_call_find_group_by_id_finish (
    userGroup *proxy,
    gchar **out_group,
    GAsyncResult *res,
    GError **error);

gboolean user_group_call_find_group_by_id_sync (
    userGroup *proxy,
    gint64 arg_id,
    gchar **out_group,
    GCancellable *cancellable,
    GError **error);

void user_group_call_find_group_by_name (
    userGroup *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean user_group_call_find_group_by_name_finish (
    userGroup *proxy,
    gchar **out_group,
    GAsyncResult *res,
    GError **error);

gboolean user_group_call_find_group_by_name_sync (
    userGroup *proxy,
    const gchar *arg_name,
    gchar **out_group,
    GCancellable *cancellable,
    GError **error);

void user_group_call_create_group (
    userGroup *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean user_group_call_create_group_finish (
    userGroup *proxy,
    gchar **out_group,
    GAsyncResult *res,
    GError **error);

gboolean user_group_call_create_group_sync (
    userGroup *proxy,
    const gchar *arg_name,
    gchar **out_group,
    GCancellable *cancellable,
    GError **error);

void user_group_call_delete_group (
    userGroup *proxy,
    gint64 arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean user_group_call_delete_group_finish (
    userGroup *proxy,
    GAsyncResult *res,
    GError **error);

gboolean user_group_call_delete_group_sync (
    userGroup *proxy,
    gint64 arg_id,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
guint64 user_group_get_gid (userGroup *object);
void user_group_set_gid (userGroup *object, guint64 value);

const gchar *user_group_get_group_name (userGroup *object);
gchar *user_group_dup_group_name (userGroup *object);
void user_group_set_group_name (userGroup *object, const gchar *value);

gboolean user_group_get_local_group (userGroup *object);
void user_group_set_local_group (userGroup *object, gboolean value);

const gchar *const *user_group_get_users (userGroup *object);
gchar **user_group_dup_users (userGroup *object);
void user_group_set_users (userGroup *object, const gchar *const *value);


/* ---- */

#define USER_TYPE_GROUP_PROXY (user_group_proxy_get_type ())
#define USER_GROUP_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), USER_TYPE_GROUP_PROXY, userGroupProxy))
#define USER_GROUP_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), USER_TYPE_GROUP_PROXY, userGroupProxyClass))
#define USER_GROUP_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), USER_TYPE_GROUP_PROXY, userGroupProxyClass))
#define USER_IS_GROUP_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), USER_TYPE_GROUP_PROXY))
#define USER_IS_GROUP_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), USER_TYPE_GROUP_PROXY))

typedef struct _userGroupProxy userGroupProxy;
typedef struct _userGroupProxyClass userGroupProxyClass;
typedef struct _userGroupProxyPrivate userGroupProxyPrivate;

struct _userGroupProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  userGroupProxyPrivate *priv;
};

struct _userGroupProxyClass
{
  GDBusProxyClass parent_class;
};

GType user_group_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (userGroupProxy, g_object_unref)
#endif

void user_group_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
userGroup *user_group_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
userGroup *user_group_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void user_group_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
userGroup *user_group_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
userGroup *user_group_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define USER_TYPE_GROUP_SKELETON (user_group_skeleton_get_type ())
#define USER_GROUP_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), USER_TYPE_GROUP_SKELETON, userGroupSkeleton))
#define USER_GROUP_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), USER_TYPE_GROUP_SKELETON, userGroupSkeletonClass))
#define USER_GROUP_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), USER_TYPE_GROUP_SKELETON, userGroupSkeletonClass))
#define USER_IS_GROUP_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), USER_TYPE_GROUP_SKELETON))
#define USER_IS_GROUP_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), USER_TYPE_GROUP_SKELETON))

typedef struct _userGroupSkeleton userGroupSkeleton;
typedef struct _userGroupSkeletonClass userGroupSkeletonClass;
typedef struct _userGroupSkeletonPrivate userGroupSkeletonPrivate;

struct _userGroupSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  userGroupSkeletonPrivate *priv;
};

struct _userGroupSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType user_group_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (userGroupSkeleton, g_object_unref)
#endif

userGroup *user_group_skeleton_new (void);


G_END_DECLS

#endif /* __GROUP_GENERATED_H__ */

/*
 * Generated by gdbus-codegen 2.56.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __GROUP_LIST_GENERATED_H__
#define __GROUP_LIST_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.group.admin.list */

#define GROUP_TYPE_LIST (group_list_get_type ())
#define GROUP_LIST(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GROUP_TYPE_LIST, groupList))
#define GROUP_IS_LIST(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GROUP_TYPE_LIST))
#define GROUP_LIST_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GROUP_TYPE_LIST, groupListIface))

struct _groupList;
typedef struct _groupList groupList;
typedef struct _groupListIface groupListIface;

struct _groupListIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_add_user_to_group) (
    groupList *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_user);

  gboolean (*handle_change_group_name) (
    groupList *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_remove_user_from_group) (
    groupList *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_user);

  guint64  (*get_gid) (groupList *object);

  const gchar * (*get_group_name) (groupList *object);

  gboolean  (*get_local_group) (groupList *object);

  const gchar *const * (*get_users) (groupList *object);

  void (*changed) (
    groupList *object);

};

GType group_list_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *group_list_interface_info (void);
guint group_list_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void group_list_complete_change_group_name (
    groupList *object,
    GDBusMethodInvocation *invocation);

void group_list_complete_add_user_to_group (
    groupList *object,
    GDBusMethodInvocation *invocation);

void group_list_complete_remove_user_from_group (
    groupList *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void group_list_emit_changed (
    groupList *object);



/* D-Bus method calls: */
void group_list_call_change_group_name (
    groupList *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean group_list_call_change_group_name_finish (
    groupList *proxy,
    GAsyncResult *res,
    GError **error);

gboolean group_list_call_change_group_name_sync (
    groupList *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GError **error);

void group_list_call_add_user_to_group (
    groupList *proxy,
    const gchar *arg_user,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean group_list_call_add_user_to_group_finish (
    groupList *proxy,
    GAsyncResult *res,
    GError **error);

gboolean group_list_call_add_user_to_group_sync (
    groupList *proxy,
    const gchar *arg_user,
    GCancellable *cancellable,
    GError **error);

void group_list_call_remove_user_from_group (
    groupList *proxy,
    const gchar *arg_user,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean group_list_call_remove_user_from_group_finish (
    groupList *proxy,
    GAsyncResult *res,
    GError **error);

gboolean group_list_call_remove_user_from_group_sync (
    groupList *proxy,
    const gchar *arg_user,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
guint64 group_list_get_gid (groupList *object);
void group_list_set_gid (groupList *object, guint64 value);

const gchar *group_list_get_group_name (groupList *object);
gchar *group_list_dup_group_name (groupList *object);
void group_list_set_group_name (groupList *object, const gchar *value);

gboolean group_list_get_local_group (groupList *object);
void group_list_set_local_group (groupList *object, gboolean value);

const gchar *const *group_list_get_users (groupList *object);
gchar **group_list_dup_users (groupList *object);
void group_list_set_users (groupList *object, const gchar *const *value);


/* ---- */

#define GROUP_TYPE_LIST_PROXY (group_list_proxy_get_type ())
#define GROUP_LIST_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GROUP_TYPE_LIST_PROXY, groupListProxy))
#define GROUP_LIST_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GROUP_TYPE_LIST_PROXY, groupListProxyClass))
#define GROUP_LIST_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GROUP_TYPE_LIST_PROXY, groupListProxyClass))
#define GROUP_IS_LIST_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GROUP_TYPE_LIST_PROXY))
#define GROUP_IS_LIST_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GROUP_TYPE_LIST_PROXY))

typedef struct _groupListProxy groupListProxy;
typedef struct _groupListProxyClass groupListProxyClass;
typedef struct _groupListProxyPrivate groupListProxyPrivate;

struct _groupListProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  groupListProxyPrivate *priv;
};

struct _groupListProxyClass
{
  GDBusProxyClass parent_class;
};

GType group_list_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (groupListProxy, g_object_unref)
#endif

void group_list_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
groupList *group_list_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
groupList *group_list_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void group_list_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
groupList *group_list_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
groupList *group_list_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GROUP_TYPE_LIST_SKELETON (group_list_skeleton_get_type ())
#define GROUP_LIST_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GROUP_TYPE_LIST_SKELETON, groupListSkeleton))
#define GROUP_LIST_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GROUP_TYPE_LIST_SKELETON, groupListSkeletonClass))
#define GROUP_LIST_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GROUP_TYPE_LIST_SKELETON, groupListSkeletonClass))
#define GROUP_IS_LIST_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GROUP_TYPE_LIST_SKELETON))
#define GROUP_IS_LIST_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GROUP_TYPE_LIST_SKELETON))

typedef struct _groupListSkeleton groupListSkeleton;
typedef struct _groupListSkeletonClass groupListSkeletonClass;
typedef struct _groupListSkeletonPrivate groupListSkeletonPrivate;

struct _groupListSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  groupListSkeletonPrivate *priv;
};

struct _groupListSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType group_list_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (groupListSkeleton, g_object_unref)
#endif

groupList *group_list_skeleton_new (void);


G_END_DECLS

#endif /* __GROUP_LIST_GENERATED_H__ */

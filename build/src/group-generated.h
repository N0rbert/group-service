/*
 * Generated by gdbus-codegen 2.56.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __GROUP_GENERATED_H__
#define __GROUP_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.group.admin */

#define USER_GROUP_TYPE_ADMIN (user_group_admin_get_type ())
#define USER_GROUP_ADMIN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), USER_GROUP_TYPE_ADMIN, UserGroupAdmin))
#define USER_GROUP_IS_ADMIN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), USER_GROUP_TYPE_ADMIN))
#define USER_GROUP_ADMIN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), USER_GROUP_TYPE_ADMIN, UserGroupAdminIface))

struct _UserGroupAdmin;
typedef struct _UserGroupAdmin UserGroupAdmin;
typedef struct _UserGroupAdminIface UserGroupAdminIface;

struct _UserGroupAdminIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_create_group) (
    UserGroupAdmin *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_delete_group) (
    UserGroupAdmin *object,
    GDBusMethodInvocation *invocation,
    gint64 arg_id);

  gboolean (*handle_find_group_by_id) (
    UserGroupAdmin *object,
    GDBusMethodInvocation *invocation,
    gint64 arg_id);

  gboolean (*handle_find_group_by_name) (
    UserGroupAdmin *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_list_cached_groups) (
    UserGroupAdmin *object,
    GDBusMethodInvocation *invocation);

  const gchar * (*get_daemon_version) (UserGroupAdmin *object);

  void (*group_added) (
    UserGroupAdmin *object,
    const gchar *arg_user);

  void (*group_deleted) (
    UserGroupAdmin *object,
    const gchar *arg_user);

};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (UserGroupAdmin, g_object_unref)
#endif

GType user_group_admin_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *user_group_admin_interface_info (void);
guint user_group_admin_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void user_group_admin_complete_list_cached_groups (
    UserGroupAdmin *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *groups);

void user_group_admin_complete_find_group_by_id (
    UserGroupAdmin *object,
    GDBusMethodInvocation *invocation,
    const gchar *group);

void user_group_admin_complete_find_group_by_name (
    UserGroupAdmin *object,
    GDBusMethodInvocation *invocation,
    const gchar *group);

void user_group_admin_complete_create_group (
    UserGroupAdmin *object,
    GDBusMethodInvocation *invocation,
    const gchar *group);

void user_group_admin_complete_delete_group (
    UserGroupAdmin *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void user_group_admin_emit_group_added (
    UserGroupAdmin *object,
    const gchar *arg_user);

void user_group_admin_emit_group_deleted (
    UserGroupAdmin *object,
    const gchar *arg_user);



/* D-Bus method calls: */
void user_group_admin_call_list_cached_groups (
    UserGroupAdmin *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean user_group_admin_call_list_cached_groups_finish (
    UserGroupAdmin *proxy,
    gchar ***out_groups,
    GAsyncResult *res,
    GError **error);

gboolean user_group_admin_call_list_cached_groups_sync (
    UserGroupAdmin *proxy,
    gchar ***out_groups,
    GCancellable *cancellable,
    GError **error);

void user_group_admin_call_find_group_by_id (
    UserGroupAdmin *proxy,
    gint64 arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean user_group_admin_call_find_group_by_id_finish (
    UserGroupAdmin *proxy,
    gchar **out_group,
    GAsyncResult *res,
    GError **error);

gboolean user_group_admin_call_find_group_by_id_sync (
    UserGroupAdmin *proxy,
    gint64 arg_id,
    gchar **out_group,
    GCancellable *cancellable,
    GError **error);

void user_group_admin_call_find_group_by_name (
    UserGroupAdmin *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean user_group_admin_call_find_group_by_name_finish (
    UserGroupAdmin *proxy,
    gchar **out_group,
    GAsyncResult *res,
    GError **error);

gboolean user_group_admin_call_find_group_by_name_sync (
    UserGroupAdmin *proxy,
    const gchar *arg_name,
    gchar **out_group,
    GCancellable *cancellable,
    GError **error);

void user_group_admin_call_create_group (
    UserGroupAdmin *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean user_group_admin_call_create_group_finish (
    UserGroupAdmin *proxy,
    gchar **out_group,
    GAsyncResult *res,
    GError **error);

gboolean user_group_admin_call_create_group_sync (
    UserGroupAdmin *proxy,
    const gchar *arg_name,
    gchar **out_group,
    GCancellable *cancellable,
    GError **error);

void user_group_admin_call_delete_group (
    UserGroupAdmin *proxy,
    gint64 arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean user_group_admin_call_delete_group_finish (
    UserGroupAdmin *proxy,
    GAsyncResult *res,
    GError **error);

gboolean user_group_admin_call_delete_group_sync (
    UserGroupAdmin *proxy,
    gint64 arg_id,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *user_group_admin_get_daemon_version (UserGroupAdmin *object);
gchar *user_group_admin_dup_daemon_version (UserGroupAdmin *object);
void user_group_admin_set_daemon_version (UserGroupAdmin *object, const gchar *value);


/* ---- */

#define USER_GROUP_TYPE_ADMIN_PROXY (user_group_admin_proxy_get_type ())
#define USER_GROUP_ADMIN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), USER_GROUP_TYPE_ADMIN_PROXY, UserGroupAdminProxy))
#define USER_GROUP_ADMIN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), USER_GROUP_TYPE_ADMIN_PROXY, UserGroupAdminProxyClass))
#define USER_GROUP_ADMIN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), USER_GROUP_TYPE_ADMIN_PROXY, UserGroupAdminProxyClass))
#define USER_GROUP_IS_ADMIN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), USER_GROUP_TYPE_ADMIN_PROXY))
#define USER_GROUP_IS_ADMIN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), USER_GROUP_TYPE_ADMIN_PROXY))

typedef struct _UserGroupAdminProxy UserGroupAdminProxy;
typedef struct _UserGroupAdminProxyClass UserGroupAdminProxyClass;
typedef struct _UserGroupAdminProxyPrivate UserGroupAdminProxyPrivate;

struct _UserGroupAdminProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  UserGroupAdminProxyPrivate *priv;
};

struct _UserGroupAdminProxyClass
{
  GDBusProxyClass parent_class;
};

GType user_group_admin_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (UserGroupAdminProxy, g_object_unref)
#endif

void user_group_admin_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
UserGroupAdmin *user_group_admin_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
UserGroupAdmin *user_group_admin_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void user_group_admin_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
UserGroupAdmin *user_group_admin_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
UserGroupAdmin *user_group_admin_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define USER_GROUP_TYPE_ADMIN_SKELETON (user_group_admin_skeleton_get_type ())
#define USER_GROUP_ADMIN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), USER_GROUP_TYPE_ADMIN_SKELETON, UserGroupAdminSkeleton))
#define USER_GROUP_ADMIN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), USER_GROUP_TYPE_ADMIN_SKELETON, UserGroupAdminSkeletonClass))
#define USER_GROUP_ADMIN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), USER_GROUP_TYPE_ADMIN_SKELETON, UserGroupAdminSkeletonClass))
#define USER_GROUP_IS_ADMIN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), USER_GROUP_TYPE_ADMIN_SKELETON))
#define USER_GROUP_IS_ADMIN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), USER_GROUP_TYPE_ADMIN_SKELETON))

typedef struct _UserGroupAdminSkeleton UserGroupAdminSkeleton;
typedef struct _UserGroupAdminSkeletonClass UserGroupAdminSkeletonClass;
typedef struct _UserGroupAdminSkeletonPrivate UserGroupAdminSkeletonPrivate;

struct _UserGroupAdminSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  UserGroupAdminSkeletonPrivate *priv;
};

struct _UserGroupAdminSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType user_group_admin_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (UserGroupAdminSkeleton, g_object_unref)
#endif

UserGroupAdmin *user_group_admin_skeleton_new (void);


G_END_DECLS

#endif /* __GROUP_GENERATED_H__ */
